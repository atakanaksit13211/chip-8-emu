extern crate sdl2;
use log::{info, trace, warn};

struct Memory {
    mem: [u8; 4096],
}

impl Default for Memory {
    fn default() -> Memory {
        const FONT: [u8; 80] = [
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80, // F
        ];

        let mut mem: Memory = Memory { mem: [0; 4096] };

        mem.mem[0x50..0x9f].copy_from_slice(&FONT[0..]);

        return mem;
    }
}

struct Registers {
    register: [u8; 16],
    adress: u16,
}

struct Display {
    scr: [bool; 64 * 32],
}

struct Timers {}

struct Stack {
    //TODO
    stack: [u16; 4],
}

impl Stack {
    //TODO
    fn push(val: u16) {}

    fn pop() -> u16 {
        0
    }
}

struct Machine {
    memory: Memory,
    registers: Registers,
    screen: Display,
    timers: Timers,
}

fn main() {
    println!("Hello, world!");
}
